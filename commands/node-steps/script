#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: rundeck-plugin:node-steps: "Turn your modules into workflow steps"
#/ usage: rerun rundeck-plugin:node-steps [ --build-dir <./build>]  --name <>  --version <1.0.0>  --modules <> 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh node-steps || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: rundeck-plugin:workflow-step. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: BUILD_DIR NAME VERSION MODULES

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------
# - - -
# Default BUILD_DIR to current working directory, if unspecified by user.
: ${BUILD_DIR:=$(pwd)/build}

MODULES_DIR=$(dirname $RERUN_MODULE_DIR)

PLUGIN_NAME="$NAME"

: ${FILE:=$PLUGIN_NAME.zip}


rerun_log info "Generating plugin providers for modules: $MODULES ..."

# Create the directory hierarchy for the plugin
create_build_hierarchy "$BUILD_DIR/$NAME"

rerun_log info "Running stubbs:archive ..."
create_stubbs-archive "$MODULES" $VERSION $BUILD_DIR/$NAME


# Generate the plugin.yaml 
rerun_log info "Generating $BUILD_DIR/$PLUGIN_NAME/plugin.yaml ..."
cat > $BUILD_DIR/$PLUGIN_NAME/plugin.yaml <<EOF
# Generated by rundeck-plugin:node-steps. Do not edit.
name: $PLUGIN_NAME
version: 1.0
rundeckPluginVersion: 1.2
author: $USER
date: $(date)
providers:
EOF


for module in $MODULES
do
	commands=($(rerun_commands $MODULES_DIR $module))
	rerun_log info "Creating plugin providers for ${#commands[*]} commands in $module ..."
	for command in ${commands[*]}
	do
		PLUGIN_STEP_TYPE=WorkflowNodeStep

		! plugintype=$(rerun_property_get $MODULES_DIR/$module/commands/$command RUNDECK_PLUGIN_STEP_TYPE) && :
		[[ -n ${plugintype:-} ]] && PLUGIN_STEP_TYPE=$plugintype
		DESCRIPTION=$(rerun_property_get $MODULES_DIR/$module/commands/$command DESCRIPTION)

		printf -- "- $module:$command ($PLUGIN_STEP_TYPE) "

		cat >> $BUILD_DIR/$PLUGIN_NAME/plugin.yaml <<-EOF
			  - name: $module:$command
			    service: $PLUGIN_STEP_TYPE
			    title: '$module: $command'
			    description: '$DESCRIPTION'
			    plugin-type: script
			    script-interpreter: /bin/bash
			    script-file: rerun.sh 
			    script-args: $module:$command
			    config:
			$(for option in $(rerun_options $MODULES_DIR $module $command); do 
			printf "  %s\n" "$(generate_config_property $module $option)"; 
			done)
		EOF
		printf "[OK]\n"

	done

done

rerun_log info "Archiving $PLUGIN_NAME plugin..."
pushd $BUILD_DIR >/dev/null
zip -r $FILE $PLUGIN_NAME

rerun_log "Plugin archived: $(pwd)/$FILE"
rerun_log "Deploy: cp $(pwd)/$FILE \$RDECK_BASE/libext"

popd >/dev/null

# Done. Exit with last command exit status.
exit $?

# - - -


