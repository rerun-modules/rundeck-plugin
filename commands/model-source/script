#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: rundeck-plugin:model-source: "Create a Resource Model source to provide node inventory"
#/ usage: rerun rundeck-plugin:model-source  --name <>  --version <1.0.0>  --modules <> [ --build-dir <./build>]  --command <>  --format <resourceyaml> 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh model-source || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: rundeck-plugin:model-source. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: NAME VERSION MODULES BUILD_DIR COMMAND FORMAT

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------
MODULES_DIR=$(dirname $RERUN_MODULE_DIR)
: ${FILE:=$NAME.zip}

module=${COMMAND%%:*}
command=${COMMAND##*:}

# Validate $COMMAND exists in this rerun environment
! rerun_commands $MODULES_DIR "$module" | grep -q "$command"  && {
	rerun_die 2 "Command not found: $COMMAND"
}


# Create the directory hierarchy for the plugin
create_build_hierarchy "$BUILD_DIR/$NAME"


rerun_log info "Running stubbs:archive ..."

create_stubbs-archive "$MODULES" $VERSION $BUILD_DIR/$NAME

# - - -
cat > $BUILD_DIR/$NAME/plugin.yaml <<EOF
# Generated by rundeck-plugin. Do not edit.
name: $NAME
version: $VERSION
rundeckPluginVersion: 1.2
author: $USER
date: $(date)
providers:
EOF

DESCRIPTION=$(rerun_property_get $MODULES_DIR/$module/commands/$command DESCRIPTION)
cat >> $BUILD_DIR/$NAME/plugin.yaml <<-EOF
	  - name: $NAME
	    service: ResourceModelSource
	    title: $NAME
	    description: '$DESCRIPTION'
	    plugin-type: script
	    script-interpreter: /bin/bash
	    script-file: rerun.sh 
	    script-args: $module:$command
	    resource-format: $FORMAT
	    config:
	$(for option in $(rerun_options $MODULES_DIR $module $command); do 
	printf "  %s\n" "$(generate_config_property $module $option)"; 
	done)
EOF

rerun_log info "Archiving $NAME plugin..."
pushd $BUILD_DIR >/dev/null
zip -r $FILE $NAME

rerun_log "Plugin archived: $(pwd)/$FILE"
rerun_log "Deploy: cp $(pwd)/$FILE \$RDECK_BASE/libext"

popd >/dev/null
# Done. Exit with last command exit status.
exit $?

